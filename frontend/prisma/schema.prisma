generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  scope             String
  providerAccountId String
  userId            String
  access_token      String?
  expires_at        Int?
  id_token          String?
  refresh_token     String?
  session_state     String?
  token_type        String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  expires      DateTime
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Client {
  id                  String               @id
  firstName           String?
  lastName            String?
  birthDate           DateTime?            @db.Date
  current             Boolean              @default(false)
  disabled            Boolean              @default(true)
  avatarUrl           String?
  contactInfo         Json?
  settings            Json?
  createdAt           DateTime?            @db.Timestamp(6)
  updatedAt           DateTime?            @db.Timestamp(6)
  roles               UserRole[]           @default([Client])
  authId              String               @unique(map: "client_auth_id_unique")
  gender              Gender?
  programmeHabits     ClientHabit[]
  transactions        ClientTransaction[]
  clientNotes         ClientNote[]
  programmeEnrolments ProgrammeEnrolment[]
}

model Programme {
  id                  String               @id @default(cuid())
  humanReadableId     String               @unique
  name                String
  startDate           DateTime             @db.Date
  endDate             DateTime?            @db.Date
  maxClients          Int
  programmeCost       Decimal              @db.Decimal(10, 2)
  notes               String?
  adhocData           Json?
  createdAt           DateTime?            @default(now()) @db.Timestamp(6)
  updatedAt           DateTime?            @default(now()) @db.Timestamp(6)
  sessionsDescription Json?
  enrolments          ProgrammeEnrolment[]
  programmeHabits     ProgrammeHabit[]
}

model ProgrammeEnrolment {
  id           String              @id @default(cuid())
  programId    String
  clientId     String
  notes        String?
  adhocData    Json?
  createdAt    DateTime?           @default(now()) @db.Timestamp(6)
  updatedAt    DateTime?           @default(now()) @db.Timestamp(6)
  transactions ClientTransaction[]
  client       Client              @relation(fields: [clientId], references: [id], onDelete: Cascade)
  programme    Programme           @relation(fields: [programId], references: [id], onDelete: Cascade)
}

model OAuthServices {
  id         String    @id @default(cuid())
  name       String
  properties Json
  createdAt  DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime? @default(now()) @db.Timestamptz(6)
}

model Habit {
  id              String           @id @default(cuid())
  title           String
  notes           String?
  monFrequency    Int              @default(0)
  tueFrequency    Int              @default(0)
  wedFrequency    Int              @default(0)
  thuFrequency    Int              @default(0)
  friFrequency    Int              @default(0)
  satFrequency    Int              @default(0)
  sunFrequency    Int              @default(0)
  current         Boolean          @default(true)
  createdAt       DateTime         @default(now()) @db.Timestamp(6)
  updatedAt       DateTime         @default(now()) @db.Timestamp(6)
  programmeHabits ProgrammeHabit[]
}

model ProgrammeHabit {
  id           String        @id @default(cuid())
  programmeId  String
  habitId      String
  notes        String?
  monFrequency Int           @default(0)
  tueFrequency Int           @default(0)
  wedFrequency Int           @default(0)
  thuFrequency Int           @default(0)
  friFrequency Int           @default(0)
  satFrequency Int           @default(0)
  sunFrequency Int           @default(0)
  current      Boolean       @default(true)
  createdAt    DateTime      @default(now()) @db.Timestamp(6)
  updatedAt    DateTime      @default(now()) @db.Timestamp(6)
  clientHabits ClientHabit[]
  habit        Habit         @relation(fields: [habitId], references: [id], onDelete: Cascade)
  programme    Programme     @relation(fields: [programmeId], references: [id], onDelete: Cascade)

  @@unique([programmeId, habitId])
}

model ClientHabit {
  id               String         @id @default(cuid())
  programmeHabitId String
  clientId         String
  habitDate        DateTime       @db.Date
  completed        Boolean        @default(false)
  timesDone        Int            @default(0)
  notes            String?
  createdAt        DateTime       @default(now()) @db.Timestamp(6)
  updatedAt        DateTime       @default(now()) @db.Timestamp(6)
  client           Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  programmeHabit   ProgrammeHabit @relation(fields: [programmeHabitId], references: [id], onDelete: Cascade)

  @@unique([programmeHabitId, clientId, habitDate])
}

model ClientTransaction {
  id                   String              @id @default(cuid())
  clientId             String
  programmeEnrolmentId String?
  transactionDate      DateTime            @default(now())
  description          String
  amount               Decimal             @default(0)
  taxAmount            Decimal             @default(0)
  total                Decimal             @default(0)
  taxRate              Decimal             @default(0.125)
  status               TransactionStatus   @default(Pending)
  transactionType      TransactionType
  client               Client              @relation(fields: [clientId], references: [id])
  programmeEnrolment   ProgrammeEnrolment? @relation(fields: [programmeEnrolmentId], references: [id])
}

model SystemSetting {
  id          String            @id @default(cuid())
  key         String            @unique
  value       String
  type        SystemSettingType
  description String?
  createdAt   DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime          @default(now()) @db.Timestamptz(6)
}

model ClientNote {
  id             String         @id @default(cuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  formId         String
  formData       Json
  clientId       String?
  formUniqueName String?
  noteType       ClientNoteType @default(TrainerNote)
  noteMetadata   Json
  client         Client?        @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

enum TransactionStatus {
  Pending
  Complete
}

enum TransactionType {
  Invoice
  Payment
  CreditNote
  Adjustment
}

enum UserRole {
  SystemAdmin
  Admin
  Client
  Trainer
}

enum Gender {
  Male
  Female
  Other
  PreferNotToSay
}

enum SystemSettingType {
  String
  Number
  Boolean
  Json
  DateTime
  Enum
  Array
  Object
}

enum ClientNoteType {
  AINote
  TrainerNote
  ClientEmail
  ClientForm
  ClientNote
  FitnessTrackerEntry
  HabitEntry
}
